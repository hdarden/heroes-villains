{"version":3,"sources":["components/SearchBar.js","components/CharactersCard.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","getCharacter","useState","input","Row","className","Form","Group","controlId","Label","Control","value","onChange","placeholder","Text","Button","type","onClick","CharacterCard","characterInfo","console","log","Col","name","biography","powerstats","intelligence","App","setCharacterInfo","characterName","a","fetch","response","json","ok","Error","statusText","Container","results","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6RAyBeA,MAtBf,YAAsC,IAAjBC,EAAgB,EAAhBA,aAAgB,EACPC,mBAAS,IADF,mBAC3BC,EAD2B,KAMnC,OANmC,KAOjC,kBAACC,EAAA,EAAD,CAAKC,UAAU,6BACb,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,kBACpB,kBAACF,EAAA,EAAKG,MAAN,sCACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,MAAOR,EAAOS,SARf,aAQuCC,YAAY,kBAChE,kBAACP,EAAA,EAAKQ,KAAN,CAAWT,UAAU,cAArB,mCAIF,kBAACU,EAAA,EAAD,CAAQC,KAAK,SAASC,QAAS,kBAAMhB,MAArC,oB,QCAOiB,MAhBf,YAA2C,IAAlBC,EAAiB,EAAjBA,cAEvB,OADAC,QAAQC,IAAI,gBAAiBF,GAE3B,kBAACf,EAAA,EAAD,CAAKC,UAAU,6BACb,kBAACiB,EAAA,EAAD,KACE,+CAEF,kBAACA,EAAA,EAAD,KACE,oCAAUH,EAAcI,MACxB,+CAAqBJ,EAAcK,UAAU,cAC7C,4CAAkBL,EAAcM,WAAWC,iB,QCqBpCC,MA7Bf,WAAgB,IAAD,EAE+BzB,qBAF/B,mBAELiB,EAFK,KAEUS,EAFV,OAG+B1B,mBAAS,aAHxC,mBAGL2B,EAHK,KAKP5B,GALO,KAKK,uCAAG,8BAAA6B,EAAA,+EAEMC,MAAM,6FAAD,OAA8FF,IAFzG,cAEXG,EAFW,gBAGEA,EAASC,OAHX,UAGXA,EAHW,OAIZD,EAASE,GAJG,sBAKTC,MAAMH,EAASI,YALN,OAOjBR,EAAiBK,GAPA,kDASjBb,QAAQC,IAAR,MATiB,0DAAH,sDAalB,OACE,kBAACgB,EAAA,EAAD,KACE,kBAACjC,EAAA,EAAD,CAAKC,UAAU,6BACb,oDAEF,kBAAC,EAAD,CAAWJ,aAAcA,IACxBkB,EAAgB,kBAAC,EAAD,CAAeA,cAAeA,EAAcmB,QAAQ,KAAQ,OCjB/DC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.ac9534a6.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Row, Button, Form } from \"react-bootstrap\";\n\nfunction SearchBar({ getCharacter }) {\n  const [ input, setInput ] = useState(''); \n\n  const handleChange = () => {\n    \n  }\n  return (\n    <Row className=\"justify-content-md-center\">\n      <Form>\n        <Form.Group controlId=\"formBasicEmail\">\n          <Form.Label>Search for a hero or villain!</Form.Label>\n          <Form.Control value={input} onChange={handleChange} placeholder=\"e.g. Superman\" />\n          <Form.Text className=\"text-muted\">\n            This will be an error message. \n          </Form.Text>\n        </Form.Group>\n        <Button type='sumbit' onClick={() => getCharacter()}>Get Character</Button>\n      </Form>\n    </Row>\n  );\n}\n\nexport default SearchBar;\n","import React from \"react\";\nimport { Container, Row, Col, Button } from \"react-bootstrap\";\n\nfunction CharacterCard({ characterInfo }) {\n  console.log(\"characterInfo\", characterInfo);\n  return (\n    <Row className=\"justify-content-md-center\">\n      <Col>\n        <h1>Character Card</h1>\n      </Col>\n      <Col>\n        <p>Name: {characterInfo.name}</p>\n        <p>Secret Identity: {characterInfo.biography[\"full-name\"]}</p>\n        <p>Intelligence: {characterInfo.powerstats.intelligence}</p>\n      </Col>\n    </Row>\n  );\n}\n\nexport default CharacterCard;\n","import React, { useState, useEffect } from 'react';\nimport SearchBar from './components/SearchBar';\nimport CharacterCard from './components/CharactersCard';\nimport { Container, Row, Col, Button } from 'react-bootstrap'\n\nfunction App() {\n\n  const [ characterInfo, setCharacterInfo ] = useState();\n  const [ characterName, setCharacterName ] = useState('supergirl');\n\n  const getCharacter = async () => {\n    try {\n      const response = await fetch(`https://cors-anywhere.herokuapp.com/https://superheroapi.com/api/10158552412591215/search/${characterName}`)\n      const json = await response.json();\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n      setCharacterInfo(json);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  return (\n    <Container>\n      <Row className='justify-content-md-center'>\n        <h1>Heroes and Villains</h1>\n      </Row>\n      <SearchBar getCharacter={getCharacter} />\n      {characterInfo ? <CharacterCard characterInfo={characterInfo.results[0]}/> : null}\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}